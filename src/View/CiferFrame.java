/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author U s E r â„¢
 */
public class CiferFrame extends javax.swing.JFrame {

    private String alphabet = "abcdefghijklmnopqrstuvwxyz";
    //encrpt variables
    private ArrayList<Character> originalAlphabet = new ArrayList<>();
    private ArrayList<Character> newAlphabet = new ArrayList<>();
    private String filePath;
    private String fileText = "";
    private String newFileText = "";
    private String encryptText = "";
    private String keyText = "";

    //decrypt variables
    private String decryptedText = "";
    private String secondaryDecryptText = "";
    private String finalDecryptText = "";
    private ArrayList<String> decryptIterString = new ArrayList<>();

    public CiferFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    private void shuffleArray() {//shuffle array elements
        keyText = "";
        for (int i = 0; i < alphabet.length(); i++) { //adding alphabet to the original alphabet array
            originalAlphabet.add(alphabet.charAt(i));
            newAlphabet.add(alphabet.charAt(i));
        }
        Collections.shuffle(newAlphabet);
        for (int i = 0; i < newAlphabet.size(); i++) {
            keyText += newAlphabet.get(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Freehand521 BT", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Encrpt Key");
        jLabel10.setToolTipText("");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, 360, 60));

        jLabel9.setFont(new java.awt.Font("Freehand521 BT", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("key file");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 570, 360, 50));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("x");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(454, 8, 40, 40));

        jLabel7.setFont(new java.awt.Font("Freehand521 BT", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("select file");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 500, 360, 50));

        jLabel4.setFont(new java.awt.Font("Freehand521 BT", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("select file");
        jLabel4.setToolTipText("");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 360, 60));

        jLabel6.setFont(new java.awt.Font("Gabriola", 0, 36)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Decrypt");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 630, 190, -1));

        jLabel5.setFont(new java.awt.Font("Gabriola", 0, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Encrypt");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel5.setOpaque(true);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 310, 190, -1));

        jLabel3.setFont(new java.awt.Font("Countryside", 0, 48)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cifer");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 210, 110));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 130, 130));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 5));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 710));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        newAlphabet.clear();
        shuffleArray();
        newFileText = "";
        encryptText = "";
        //change alphabet and put it into a new textline
        for (int i = 0; i < fileText.length(); i++) {
            for (int j = 0; j < alphabet.length(); j++) {
                if (fileText.charAt(i) == alphabet.charAt(j)) {
                    newFileText += newAlphabet.get(j);
                    break;
                } else if (j == 25) {
                    newFileText += fileText.charAt(i);
                }
            }
        }
        //random string dividing
        Random rn = new Random();
        int randomNumber = rn.nextInt(5) + 6;

        int newTextlength = newFileText.length();
        int newTextLessCharacterNo = randomNumber - newTextlength % randomNumber;

        for (int i = 0; i < newTextLessCharacterNo; i++) {//setting a fixed length
            newFileText += " ";
        }

        ArrayList<String> tempStrings = new ArrayList<>();
        String temp = "";
        int count = 0;
        for (int j = 0; j < newFileText.length(); j++) {
            count++;
            temp += newFileText.charAt(j);
            if (count == randomNumber) {
                tempStrings.add(temp);
                temp = "";
                count = 0;
            }
        }

        ArrayList<Integer> tempIteration = new ArrayList<>(); //create temperory arraylist to store iterations
        for (int i = 0; i < randomNumber; i++) {
            tempIteration.add(i);
        }
        Collections.shuffle(tempIteration);
        for (int i = 0; i < tempIteration.size(); i++) {
            keyText += tempIteration.get(i);
        }
        System.out.println(tempStrings);
        for (int i = 0; i < tempStrings.size(); i++) {
            for (int j = 0; j < tempIteration.size(); j++) {
                encryptText += (tempStrings.get(i).charAt(tempIteration.get(j)));
            }
        }
        jLabel10.setText(keyText);
        String dectFile = jLabel4.getText();
        int lastPos = dectFile.lastIndexOf("\\");
        String dectFilePath = dectFile.substring(0, lastPos);
        System.out.println(dectFilePath);
        try {
            FileWriter file = new FileWriter(dectFilePath + "\\" + "key.txt");
            file.write(keyText);
            file.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
        try {
            FileWriter file = new FileWriter(dectFilePath + "\\" + "encrypted.txt");
            file.write(encryptText);
            file.close();
        } catch (Exception ex) {
            ex.getStackTrace();
        }
        System.out.println("Encrypt Key:" + keyText);
        //create a new file to write the output
//        try {
//            FileWriter fileWriter = new FileWriter("Encrypt.txt");
//            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
//            bufferedWriter.write(encryptText);
//            System.out.println("Encrpt text:" + encryptText);
//            bufferedWriter.close();
//
//        } catch (IOException ex) {
//            System.out.println("Error writing to file");
//        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        try (BufferedReader br = new BufferedReader(new FileReader(jLabel9.getText()))) {
            String line = null;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        }catch(Exception ex){ex.getStackTrace();}
        if (jLabel9.getText().length() > 30) {
            decryptIterString.clear();
            finalDecryptText = "";
            secondaryDecryptText = "";
            String temp = jLabel9.getText();

            int tempIterationNumber = temp.length() - 26;                //get the iteration numbers
            ArrayList<Integer> tempIterationAL = new ArrayList<>();
            for (int i = 26; i < temp.length(); i++) {
                tempIterationAL.add((Character.getNumericValue(temp.charAt(i))));//iteration Array
            }

            //making iterations add to the sub strings
            String tempSize = "";
            int count = 0;
            for (int j = 0; j < decryptedText.length(); j++) {
                count++;
                tempSize += decryptedText.charAt(j);
                if (count == tempIterationNumber) {
                    decryptIterString.add(tempSize);
                    tempSize = "";
                    count = 0;
                }
            }

            for (int i = 0; i < decryptIterString.size(); i++) {
                String tempsubstring = decryptIterString.get(i);
                char[] chars = tempsubstring.toCharArray();
                for (int j = 0; j < tempIterationNumber; j++) {
                    chars[tempIterationAL.get(j)] = tempsubstring.charAt(j);
                }
                for (int k = 0; k < tempIterationNumber; k++) {
                    secondaryDecryptText += chars[k];
                }
            }
            for (int i = 0; i < secondaryDecryptText.length(); i++) {
                int counter = 0;
                for (int j = 0; j < 26; j++) {
                    counter++;
                    if (secondaryDecryptText.charAt(i) == temp.charAt(j)) {
                        finalDecryptText += alphabet.charAt(j);
                        counter = 0;
                        break;
                    } else if (counter == 26) {
                        finalDecryptText += secondaryDecryptText.charAt(i);
                        counter = 0;
                    }
                }
            }
            System.out.print(finalDecryptText);
            //create a new file to write the output
            try {
                FileWriter fileWriter = new FileWriter("Decrypt.txt");
                BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                bufferedWriter.write(finalDecryptText);
                bufferedWriter.close();
            } catch (IOException ex) {
                System.out.println("Error writing to file");
            }
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        keyText = "";
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filePath = file.getAbsolutePath();
            jLabel9.setText(filePath);
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        fileText = "";
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filePath = file.getAbsolutePath();
            jLabel4.setText(filePath);
            String line = null;
            try {
                // FileReader reads text files in the default encoding.
                FileReader fileReader = new FileReader(filePath);
                // Always wrap FileReader in BufferedReader.
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                while ((line = bufferedReader.readLine()) != null) {
                    fileText += line.toLowerCase(); //adding all lines to a sin
                }
                bufferedReader.close();
            } catch (FileNotFoundException ex) {
                System.out.println("Unable to open file");
            } catch (IOException ex) {
                System.out.println("Error reading file");
            }
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        decryptedText = "";
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filePath = file.getAbsolutePath();
            jLabel7.setText(filePath);
            String line = null;
            try {
                // FileReader reads text files in the default encoding.
                FileReader fileReader = new FileReader(filePath);
                // Always wrap FileReader in BufferedReader.
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                while ((line = bufferedReader.readLine()) != null) {
                    decryptedText += line; //adding all lines to a sin
                }
                System.out.println("DecryptedText:" + decryptedText);
                bufferedReader.close();
            } catch (FileNotFoundException ex) {
                System.out.println("Unable to open file");
            } catch (IOException ex) {
                System.out.println("Error reading file");
            }
        }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel10MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CiferFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CiferFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CiferFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CiferFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CiferFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
